import t from"fs";import e from"path";import n from"url";import o from"content-disposition";import r from"archive-type";import s from"decompress";import i from"filenamify";import m from"get-stream";import c from"got";import a from"make-dir";import f from"pify";import p from"p-event";import l from"file-type";import u from"ext-name";import d from"process";var h={};var g=d;const x=t;const b=e;const{URL:v}=n;const y=o;const j=r;const U=s;const _=i;const w=m;const $=c;const k=a;const q=f;const z=p;const F=l;const L=u;const O=q(x);const filenameFromPath=t=>b.basename(new v(t.requestUrl).pathname);const getExtFromMime=t=>{const e=t.headers["content-type"];if(!e)return null;const n=L.mime(e);return 1!==n.length?null:n[0].ext};const getFilename=(t,e)=>{const n=t.headers["content-disposition"];if(n){const t=y.parse(n);if(t.parameters&&t.parameters.filename)return t.parameters.filename}let o=filenameFromPath(t);if(!b.extname(o)){const n=(F(e)||{}).ext||getExtFromMime(t);n&&(o=`${o}.${n}`)}return o};h=(t,e,n)=>{if("object"===typeof e){n=e;e=null}n=Object.assign({encoding:null,rejectUnauthorized:"false"!==g.env.npm_config_strict_ssl},n);const o=$.stream(t,n);const r=z(o,"response").then(t=>{const e=null===n.encoding?"buffer":n.encoding;return Promise.all([w(o,{encoding:e}),t])}).then(t=>{const[o,r]=t;if(!e)return n.extract&&j(o)?U(o,n):o;const s=n.filename||_(getFilename(r,o));const i=b.join(e,s);return n.extract&&j(o)?U(o,b.dirname(i),n):k(b.dirname(i)).then(()=>O.writeFile(i,o)).then(()=>o)});o.then=r.then.bind(r);o.catch=r.catch.bind(r);return o};var P=h;export default P;

