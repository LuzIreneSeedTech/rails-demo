import e from"file-type";import t from"get-stream";import r from"pify";import o from"yauzl";import n from"buffer";var i={};var m=n.Buffer;const s=e;const a=t;const f=r;const c=o;const getType=(e,t)=>{const r=61440;const o=16384;const n=40960;const i=e.versionMadeBy>>8;return(t&r)===n?"symlink":(t&r)===o||0===i&&16===e.externalFileAttributes?"directory":"file"};const extractEntry=(e,t)=>{const r={mode:e.externalFileAttributes>>16&65535,mtime:e.getLastModDate(),path:e.fileName};r.type=getType(e,r.mode);0===r.mode&&"directory"===r.type&&(r.mode=493);0===r.mode&&(r.mode=420);return f(t.openReadStream.bind(t))(e).then(a.buffer).then(e=>{r.data=e;"symlink"===r.type&&(r.linkname=e.toString());return r}).catch(e=>{t.close();throw e})};const extractFile=e=>new Promise((t,r)=>{const o=[];e.readEntry();e.on("entry",t=>{extractEntry(t,e).catch(r).then(t=>{o.push(t);e.readEntry()})});e.on("error",r);e.on("end",()=>t(o))});i=()=>e=>m.isBuffer(e)?s(e)&&"zip"===s(e).ext?f(c.fromBuffer)(e,{lazyEntries:true}).then(extractFile):Promise.resolve([]):Promise.reject(new TypeError(`Expected a Buffer, got ${typeof e}`));var d=i;export default d;

