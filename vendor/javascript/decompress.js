import t from"path";import e from"graceful-fs";import r from"decompress-tar";import n from"decompress-tarbz2";import o from"decompress-targz";import i from"decompress-unzip";import s from"make-dir";import p from"pify";import m from"strip-dirs";import a from"process";import f from"buffer";var c={};var l=f.Buffer;var h=a;const u=t;const d=e;const y=r;const g=n;const w=o;const k=i;const v=s;const P=p;const b=m;const j=P(d);const runPlugins=(t,e)=>0===e.plugins.length?Promise.resolve([]):Promise.all(e.plugins.map(r=>r(t,e))).then(t=>t.reduce((t,e)=>t.concat(e)));const safeMakeDir=(t,e)=>j.realpath(t).catch(r=>{const n=u.dirname(t);return safeMakeDir(n,e)}).then(r=>{if(0!==r.indexOf(e))throw new Error("Refusing to create a directory outside the output path.");return v(t).then(j.realpath)});const preventWritingThroughSymlink=(t,e)=>j.readlink(t).catch(t=>null).then(t=>{if(t)throw new Error("Refusing to write into a symlink");return e});const extractFile=(t,e,r)=>runPlugins(t,r).then(t=>{r.strip>0&&(t=t.map(t=>{t.path=b(t.path,r.strip);return t}).filter(t=>"."!==t.path));"function"===typeof r.filter&&(t=t.filter(r.filter));"function"===typeof r.map&&(t=t.map(r.map));return e?Promise.all(t.map(t=>{const r=u.join(e,t.path);const n=t.mode&~h.umask();const o=new Date;return"directory"===t.type?v(e).then(t=>j.realpath(t)).then(t=>safeMakeDir(r,t)).then(()=>j.utimes(r,o,t.mtime)).then(()=>t):v(e).then(t=>j.realpath(t)).then(t=>safeMakeDir(u.dirname(r),t).then(()=>t)).then(e=>"file"===t.type?preventWritingThroughSymlink(r,e):e).then(t=>j.realpath(u.dirname(r)).then(e=>{if(0!==e.indexOf(t))throw new Error("Refusing to write outside output directory: "+e)})).then(()=>"link"===t.type||"symlink"===t.type&&"win32"===h.platform?j.link(t.linkname,r):"symlink"===t.type?j.symlink(t.linkname,r):j.writeFile(r,t.data,{mode:n})).then(()=>"file"===t.type&&j.utimes(r,o,t.mtime)).then(()=>t)})):t});c=(t,e,r)=>{if("string"!==typeof t&&!l.isBuffer(t))return Promise.reject(new TypeError("Input file required"));if("object"===typeof e){r=e;e=null}r=Object.assign({plugins:[y(),g(),w(),k()]},r);const n="string"===typeof t?j.readFile(t):Promise.resolve(t);return n.then(t=>extractFile(t,e,r))};var E=c;export default E;

